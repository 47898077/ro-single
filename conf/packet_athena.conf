//      ______  __    __                                 
//     /\  _  \/\ \__/\ \                                
//   __\ \ \_\ \ \  _\ \ \___      __    ___      __     
// / __ \ \  __ \ \ \/\ \  _  \  / __ \/  _  \  / __ \   
///\  __/\ \ \/\ \ \ \_\ \ \ \ \/\  __//\ \/\ \/\ \_\ \_ 
//\ \____\\ \_\ \_\ \__\\ \_\ \_\ \____\ \_\ \_\ \__/ \_\
// \/____/ \/_/\/_/\/__/ \/_/\/_/\/____/\/_/\/_/\/__/\/_/
//  _   _   _   _   _   _   _     _   _   _   _   _   _
// / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ 
//( 9 | 9 | M | a | x | E | a ) ( A | t | h | e | n | a )
// \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/
//
//--------------------------------------------------------------
// Athena sockets Configuration file
// translated (davidsiaw)

// 显示除错报告(除错用，当发生错误时，报告会被储存。)
debug: no

// Linux/Epoll: Maximum Events per cycle
// Default Value:
//	(Maximum Supported Connections)/2
// NOTE: this controls the maximum collected socket-events per-cycle (call to epoll_wait())
//       for example settings this to 32 will allow up to 32 events (incoming data/new connections
//       per server-cycle.
// NOTE: Recommended Settings is at least half the maximum supported connections
//       Settings this to a lower value, may cause lags/delays
//       Depending on available CPU Time
// NOTE: This Setting is only available on Linux when build using EPoll as event dispatcher!
//
//epoll_maxevents: 1024

// 当连结非正常插断超过多少秒时关闭该连结？
stall_time: 60

//----- IP规则设定 -----

// 连线时是否检查其IP？
// 也是一DDos的防御机制
enable_ip_rules: yes

// Order of the checks
// deny,allow     : 先确认所有拒绝规则再确认允许规则，若都没有符合判定则允许
// allow,deny     : 先确认所有允许规则再确认拒绝规则，若都没有符合判定则允许
// mutual-failure : 只允许允许规则符合及没有拒绝规则符合
// (预设是 deny,allow)
order: deny,allow
// order: allow,deny
// order: mutual-failure

// IP 规则
// allow : 接受此范围IP (己是他被视为 DDoS)
// deny  : 拒绝此范围IP连线
// 规则是有顺序性的, 先符合的(允许或拒绝)先使用

// allow: 127.0.0.1
// allow: 192.168.0.0/16
// allow: 10.0.0.0/255.0.0.0
// allow: all

// deny: 127.0.0.1

//---- DDoS 保护设定 ----
// 当一个连结请求在 ddos_interval 设定的毫秒内超过 ddos_count 设定的次数时，它将被认定为ddos攻击

// 连结间隔时间(毫秒)
// (预设是 3000 毫秒, 即为 3 秒)
ddos_interval: 3000

// 连结频率
// (预设是 5 次)
ddos_count: 5

// 遭受ddos攻击之后多久时间解除ddos限制 (毫秒)
// 此时间区间过后, DDoS 将不被视为
// (预设是 600000 毫秒, 即为 10 秒)
ddos_autoreset: 600000


import: conf/import/packet_conf.txt
