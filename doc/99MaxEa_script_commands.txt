//===== 99MaxEathena 文档 ========================================
//= 99MaxEa_script_commands 自定义脚本指令 [说明文档]
//===== 作者 =====================================================
//= 99MaxEa 二次开发团队
//===== 最后更新日期 =============================================
//= 20180706
//================================================================
//= 更多RO资源下载 尽在 http://www.99Max.mE 好多惊喜等你来拿!
//================================================================

//================================================================
 自定义脚本指令 - [用来实现魔物/NPC某种特效effect效果]
//================================================================

*99max_specialeffect(<效果参数>{, <发送目标>{, <UID>{, <AID>}}})
*99max_specialeffect(<效果参数>{, <发送目标>{, "<NPC名称>"{, <AID>}}})

//================================================================
 自定义脚本指令 - [用来根据背包序号读写装备的 Random Option 属性]
//================================================================

*getidxrandomoption(<背包序号>,<Random Option序号>,<要修改的数据类型>{,<角色编号>});

获取背包序号指定道具的 Random Option 属性的值

要修改的数据类型:
ROA_ID - 随机属性的ID, 要和 db/re/item_randomopt_db.txt 中的对应
ROA_VALUE - 随机属性的值
ROA_PARAM - 随机属性的参数(这个参数的作用取决于item_randomopt_db.txt中如何使用ROA_PARAM, 目前看来所有官方的随机属性都没有用到这个参数)

返回值:
操作成功则返回查询的值, 失败则返回 -1, 如果因为请求的<类型>无效而失败则返回 0

*setidxrandomoption(<背包序号>,<Random Option序号>,<id>,<value>,<param>{,<角色编号>});

设置背包序号指定道具的 Random Option 属性

如果被设定的道具未被穿戴, 那么会先告诉客户端该道具被删除, 
然后完成对道具的属性修改后, 再告诉客户端你获得了一个新道具, 此时聊天栏会有个提示.

如果被设定的道具已被穿戴, 那么会先将装备脱下, 然后告诉客户端该道具被删除, 
接着完成对道具的属性修改后, 再告诉客户端你获得了一个新道具, 并自动将装备穿戴上.

该道具的背包序号不会因为该指令的操作而被修改

此选项会在 picklog 日志表中留下道具的变化痕迹

返回值:
操作成功则返回 1, 失败则返回 0

//================================================================
 自定义脚本指令 - [获取穿戴在指定位置的装备的背包位置序号]
//================================================================

*getequipidx <装备位置编号>,{<角色编号>};

注意: “装备位置编号”和 getequipid 一样,
是 EQI_* 开头的常量(而不是 EQP_* 开头的常量)

返回值:
-1 - 在指定的位置找不到装备
-2 - 装备位置编号无效
-3 - 指定的角色编号无效或者目标玩家不在线
其他大于等于 0 的数值, 则表示成功,
返回值就是所查位置装备的“背包位置序号”

//================================================================
 自定义脚本指令 - [用来控制角色的脑袋和身体朝向]
//================================================================

*setdir

*setheaddir <朝向编号>{,<角色编号>};

用于调整角色的脑袋朝向

朝向编号:
0 - 为看正前方
1 - 为向右看
2 - 为向左看
	
返回值:
该指令无论成功失败, 都不会有返回值

*setbodydir <朝向编号>{,<角色编号>};

用于调整角色身体的朝向

朝向编号:
和NPC的朝向编号一样, 从 0 到 7 一共8个方位可选择
	
返回值:
该指令无论成功失败, 都不会有返回值

//================================================================
 自定义脚本指令 - [用于让指定的角色立刻退出队伍]
//================================================================

*party_leave {<角色编号>};

返回值:
若指定角色不在线或不在队伍中, 则返回 0, 成功则返回 1

//================================================================
 自定义脚本指令 - [邮件发送系统]
//================================================================

*mail_create <发件人名>,<题目>,<内容>{,<ZENY>};

*mail_additem <item id>,<amount>{,<account ID>};
*mail_additem2 <item id>,<amount>{,<account ID>};
*mail_additem3 <item id>,<amount>{,<account ID>};
*mail_additembound <item id>,<amount>{,<account ID>};
*mail_additembound2 <item id>,<amount>{,<account ID>};
*mail_additembound3 <item id>,<amount>{,<account ID>};

与相应的getitem指令参数相同.

*mail_send {<收件人CID 或 收件人名>};

通过CID发送邮件只能发送给在线玩家

注意! mail_create/additem/send 三种指令必须共同使用, 指令间不可含有其他指令.

----------
错误范例:
----------
mail_create(********);
mes "请输入你要发送的物品"; 
input .@item;
mes "请输入数量"; 
input .@itemcount;
mail_additem(.@item,.@itemcount);
next;
mes "邮件发送成功";
close2;
mail_send("GM01");
end;

----------
正确范例:
----------
mes "请输入你要发送的物品"; 
input .@item;
mes "请输入数量"; 
input .@itemcount;
next;
mail_create(********);
mail_additem(.@item,.@itemcount);
if(mail_send("GM01")){
mes "邮件发送成功";
close2;
end;
}

//================================================================
 自定义脚本指令 - [光环系统]
//================================================================

*auraset(<aura>{,<char id>});

用于设置玩家的光环类型.

*getaura({<char id>});

用于获取玩家当前的光环类型.

//================================================================
 自定义脚本指令 - [脚本清理]
//================================================================

*scriptclear;

//================================================================
 自定义脚本指令 - []
//================================================================

*getidentifylist

//================================================================
 自定义脚本指令 - []
//================================================================

*script4eachmob

//================================================================
 自定义脚本指令 - []
//================================================================

*dispmes

//================================================================
 自定义脚本指令 - []
//================================================================

*failedrefitem2

//================================================================
 自定义脚本指令 - []
//================================================================

*sc_check <状态编号>{,<gid>};

用于判断指定的状态(Buff)是否存在, 并取得状态参数.

当返回值为1的时候, 可以通过以下变量来读取状态的参数:

@sc_val1		状态的第1个参数(如果是技能对应的状态的话, 往往这个参数都是技能等级)
@sc_val2		状态的第2个参数
@sc_val3		状态的第3个参数
@sc_val4		状态的第4个参数
@sc_tickleft	状态的剩余时间(单位为毫秒)

返回值:
0 表示玩家身上没有你指定的状态(Buff), 1 表示玩家身上拥有你指定的状态(Buff)

//================================================================
 自定义脚本指令 - []
//================================================================

*getbattlestatus

//================================================================
 自定义脚本指令 - []
//================================================================

*statuscalc

//================================================================
 自定义脚本指令 - []
//================================================================

*checkidle

//================================================================
 自定义脚本指令 - [使指定<NPC名称>头上显示露天商店的招牌, 点击招牌可触发NPC]
//================================================================

*showvend("<NPC名称>",<是否显示>{,"<招牌名称>"});

是否显示:
0 - 隐藏招牌
1 - 显示招牌

用法:
prontera,150,150,4	shop	Vend_Title_Test	48,501:-1

-	script	NPC_Vend	-1,{
end;
OnInit:
	showvend("Vend_Title_Test", 1, "有招牌的商店");
end;
}

返回值:
操作成功则返回 1, 失败则返回 0

//================================================================
 自定义脚本指令 - []
//================================================================

*get_hotkey <快捷键位置编号>{,<要获取的数据类型>};

获取指定快捷键位置的信息, 快捷键位置编号必须大于 0 小于等于 MAX_HOTKEYS (这是个常量, 脚本中可以直接使用).

要获取的数据类型:
0 - 获取快捷键的类型 (0 表示该位置的快捷键上放的是一个物品, 1 表示该位置的快捷键上放的是一个技能)
1 - 获取技能编号或物品的编号
2 - 获取登记在快捷键上的技能等级

返回值:
如果参数不合法则返回 -1, 否则返回的是你想要获取的数据内容

//================================================================
 自定义脚本指令 - []
//================================================================

*set_hotkey <快捷键位置编号>,<快捷键的类型>,<物品编号/技能编号>,<技能等级>;

设置玩家快捷键上的内容, 快捷键位置编号必须大于 0 小于等于 MAX_HOTKEYS (这是个常量, 脚本中可以直接使用).

快捷键的类型:
0 - 这个快捷键位置想放置一个物品 (若使用该值, 则最末尾的"技能等级"参数无意义, 请直接给"技能等级"参数传 0 )
1 - 这个快捷键位置想放置一个技能

返回值:
设置成功则返回 1, 设置失败则返回 0

//================================================================
 自定义脚本指令 - []
//================================================================

*lock_hotkey

//================================================================
 自定义脚本指令 - []
//================================================================

*petctrl

//================================================================
 自定义脚本指令 - []
//================================================================

*strcut

//================================================================
 自定义脚本指令 - []
//================================================================

*99max_identifyall

//================================================================
 自定义脚本指令 - []
//================================================================

*setmount

//================================================================
 自定义脚本指令 - []
//================================================================

*getskillname

//================================================================
 自定义脚本指令 - []
//================================================================

*getcharfriendly

//================================================================
 自定义脚本指令 - []
//================================================================

*processhalt;

在部分支持的事件处理脚本中使用后, 能够在事件脚本结束时, 中断源代码的后续逻辑. 

该指令特定情况下会失效:
	该指令的使用流程中, 在使用 processhalt 之前不能出现 sleep、sleep2、next、close2、menu、
	select、prompt、input、progressbar 等会导致脚本暂停的指令, 否则它的中断效果将失效.

失效可能会带来效果错乱:
	此外如果错误的使用了 processhalt 的执行顺序, 也会影响到下一次此事件的触发效果,
	下一次触发此事件时不管是否执行过 processhalt, 都会被认为需要中断.	

支持的事件以及其中断作用说明:
- OnPCPartyCreateEvent      中断后服务端会无视玩家本次创建队伍的请求
- OnPCPartyJoinEvent        中断后服务端会无视玩家本次加入队伍的请求
- OnPCPartyLeaveEvent       中断后服务端会无视玩家本次离开队伍的请求

- OnPCGuildCreateEvent      中断后服务端会无视玩家本次创建公会的请求
- OnPCGuildJoinEvent        中断后服务端会无视玩家本次加入公会的请求
- OnPCGuildLeaveEvent       中断后服务端会无视玩家本次离开公会的请求

- OnPCUseSkillEvent         中断后服务端会无视玩家本次使用技能的请求
- OnPCUseItemEvent          中断后服务端会无视玩家本次使用物品的请求
- OnPCMoveEvent             中断后服务端会无视玩家本次移动的请求

//================================================================
 自定义脚本指令 - [可查看指定背包序号的物品信息]
//================================================================

*getinventoryinfo <背包位置序号>,<要查看的信息类型>;

这里的背包位置序号可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

要查看的信息类型:
0 - 物品编号
1 - 堆叠数量
2 - 装备的穿戴位置(如果为 0 则表示还没穿戴在身上, 位置请参考 EQP_* 开头的常量)
3 - 精炼值
4 - 是否已经鉴定(1为已鉴定, 0为未鉴定)
5 - 属性(说是属性, 其实最常用是用来判断物品是否损坏, 若损坏则返回1, 没坏则返回 0)
6 - 第一个卡槽的卡片编号
7 - 第二个卡槽的卡片编号
8 - 第三个卡槽的卡片编号
9 - 第四个卡槽的卡片编号
10 - 过期时间(Unix时间戳, 0 表示永不过期)
11 - 装备的唯一编号(unique_id) - 注意: 返回字符串类型的变量

注意:
若你想获取装备的唯一编号, 那么用来存放返回值的必须是一个字符串类型的变量(变量结尾带$符号),
如果用来存放返回值的变量是数值类型的话, 那么拿到的值不是装备的唯一编号.
	
.@uid$ = getinventoryinfo(背包序号, 11);	// 正确
.@uid = getinventoryinfo(背包序号, 11);	// 错误
	
返回值:
失败则返回 -1, 成功则返回你所查询的信息的值

//================================================================
 自定义脚本指令 - []
//================================================================

*monsterignore

//================================================================
 自定义脚本指令 - []
//================================================================

*auto_revive

//================================================================
 自定义脚本指令 - [可穿戴指定背包序号的装备]
//================================================================

*equipinventory <背包序列>;

作用: 装备指定背包序列道具

//================================================================
 自定义脚本指令 - [可脱下指定背包序号的装备]
//================================================================

*unequipinventory <背包序列>;

作用: 卸除指定背包序列道具

//================================================================
 自定义脚本指令 - [可用来设置玩家避免被魔物攻击]
//================================================================

*battleignore <开关标记>{,<AID>};

作用: 将指定的角色设置为魔物无视状态(魔物会无视此玩家的存在, 因此不会攻击该玩家, 或许可以叫无敌状态), 避免被魔物攻击.

开关标记: 0 关闭无视(角色会被魔物看见), 1 打开无视(角色不会被魔物看见, 也不会被攻击)

返回值: 该指令无论成功失败, 都不会有返回值

//================================================================
 自定义脚本指令 - [用来移除指定的单个 bonus_script]
//================================================================

*bonus_script_remove <script_code>;

作用: 移除指定的bonus_script

//================================================================
 自定义脚本指令 - [能够让指定的数值不超过你指定的最小值和最大值范围]
//================================================================

*cap_value <数值>,<最小值>,<最大值>;

作用: 让指定的数值不超过最小/最大值

//================================================================
 自定义脚本指令 - [可删除指定背包序号的物品]
//================================================================

*delinventory <背包序列>,<数量>;

作用: 删除指定背包序列道具

//================================================================
 自定义脚本指令 - [可以确认一个道具在物品数据库中是否存在]
//================================================================

*existitem(<id>);
*existitem(<"name">);

作用: 检测是否存在该物品

返回 0 如果不存在
返回 <道具id> 如果物品存在, 且可以叠加
返回 - <道具id> 如果物品存在, 且不能叠加
		
举例: existitem("太阳眼镜") == -2201

//================================================================
 自定义脚本指令 - [用来获得指定位置装备的租赁到期剩余秒数]
//================================================================

*getequipexpiretick <装备位置>,{<角色ID>};

作用: 取得装备位置的租赁到期时间

//================================================================
 自定义脚本指令 - [可获得与指定IP相同的玩家数量和他们的CID\AID\角色名信息]
//================================================================

*getsameipinfo;

相关变量: 
$@same_cid
$@same_aid
$@same_name$

//================================================================
 自定义脚本指令 - [可以用特定的理由把玩家踢下线]
//================================================================

*logout <AID>;

作用: 使指定的AID下线

//================================================================
 自定义脚本指令 - [根据指定的GID, 在不杀死魔物的情况下将魔物从地图中移除]
//================================================================

*mobremove <GID>;

作用: 移除指定的GID魔物

//================================================================
 自定义脚本指令 - [对指定范围的玩家执行相同的一段脚本]
//================================================================

*script4each "<脚本>",<类型>{,...}

类型0: [全服]   script4each "<脚本>",0;
类型1: [全地图] script4each "<脚本>",1,"地图名";
类型2: [全区域] script4each "<脚本>",2,"地图名",坐标x,坐标y,范围;
类型3: [全组队] script4each "<脚本>",3,玩家cid; 
类型4: [全公会] script4each "<脚本>",4,玩家cid;
类型5: [全区域] script4each "<脚本>",5,"地图名",坐标x0,坐标y0,坐标x1,坐标y1;
类型6: [全组队] script4each "<脚本>",6,队伍id; 
类型7: [全公会] script4each "<脚本>",7,公会id;

//================================================================
 自定义脚本指令 - [用来搜索数组内容]
//================================================================

*searcharray <阵列>,<字串/数值>;

作用: 搜索阵列是否包含指定的字串或数值

返回-1: 没有搜索到结果
返回值: 阵列值

例子:

setarray .array,1,2,3,4,5,6,7,8,9,0;
		 .@i = searcharray(.array,7);

结果:
.@i = 6
如此一来就可以知道7在.array的第6个位子

//================================================================
 自定义脚本指令 - [用来增加/减少指定位置装备的租赁时间]
//================================================================

*setrenttime <装备位置>,<时间>,{<角色ID>};

作用: 增指定装备位置的租赁时间

//================================================================
 自定义脚本指令 - [用来重算玩家的状态]
//================================================================

*status_calc;

作用: 重新计算角色素值

//================================================================
 自定义脚本指令 - [可以查看指定账号玩家的装备信息]
//================================================================

*viewequip <AID>,{<flag>}

检视AID的装备

flag :
0 -> 必须对方开启或拥有可检视装备GM权限
1 -> 强制观看

//================================================================
 自定义脚本指令 - [与 warpparty 用法一致, 但能够传送已经死亡的队员]
//================================================================

*warpparty2 <地图名称>,<X>,<Y>,<队伍ID>,{<from mapname>};

作用: 传送所有队伍至指定地图，包含已死亡的角色

//================================================================

//================================================================
 自定义脚本指令 - 99max_sleep & 99max_sleep2
//================================================================

*99max_sleep
*99max_sleep2
